# 100-matrix_mul.py
==============================================================
 Testing the functions defined in the module 100-matrix_mul.py 
===============================================================
The function matrix_mul() simply returns a product matrix (of 2 rectangular matrices)
The args must be matrices and an exception, TypeError
is raised if any of the parameter provided does not qualify.

For other types of exceptions / checks done by the function, refer to the module's __doc__

Valid Matrix Arguments
======================
>>> matrix = __import__('100-matrix_mul').matrix_mul
>>> mat1 = [[1, 2], [3, 4]]
>>> mat2 = [[1, 2], [3, 4]]
>>> matrix(mat1, mat2)
[[7, 10], [15, 22]]
>>> matrix([[]], [[]])
Traceback (most recent call last):
ValueError: m_a can't be empty
>>> matrix([[1,2], [3,4]], [])
Traceback (most recent call last):
ValueError: m_b can't be empty
>>> matrix([[1,2], [3,4]], [[2,3,4], [5,6,7], [8,9,10]])
Traceback (most recent call last):
ValueError: m_a and m_b can't be multiplied
>>> matrix([[1,2], [3,4]], [[2,3,4], [5,6]])
Traceback (most recent call last):
TypeError: each row of m_b must be of the same size
>>> matrix([[2,3,4], [5,6,7]], [1,2,3,4])
Traceback (most recent call last):
TypeError: m_b must be a list of lists
>>> matrix([[1,2], [3,4]], [[2,3,4], [5,6,'7']])
Traceback (most recent call last):
TypeError: m_b should contain only integers or floats
>>> matrix([[1,2], [3,4.665]], [[2,3,4], [5,6.6,7]])
[[12, 16.2, 18], [29.325, 39.789, 44.655]]

Other cases:
=================
No Argument
>>> matrix()
Traceback (most recent call last):
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
