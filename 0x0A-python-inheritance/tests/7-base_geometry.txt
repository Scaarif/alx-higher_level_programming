# 7-base_geometry.py
==============================================================
 Testing the class defined in the module 7-base_geometry.py 
===============================================================
The class BaseGeometry defines a simple geometry class with attributes and methods.
Verifies that the attribute, value is an integer and raises an error if that
is not the case.

Instantiation & Success Cases 
==============================
>>> geometry = __import__('7-base_geometry').BaseGeometry
>>> test = geometry() 
>>> test #doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at 0x...>
>>> test.integer_validator('my_int', 12)
>>> test.integer_validator('width', 89)
>>> test.integer_validator(3, 89)
>>> test.area()
Traceback (most recent call last):
Exception: area() is not implemented

Fail cases
========================
>>> test.integer_validator('name', 'John')
Traceback (most recent call last):
TypeError: name must be an integer
>>> test.integer_validator('name')
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> test.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> test.integer_validator('score', -2)
Traceback (most recent call last):
ValueError: score must be greater than 0
>>> test.integer_validator('score', (4,))
Traceback (most recent call last):
TypeError: score must be an integer
>>> test.integer_validator('score', [46, 89])
Traceback (most recent call last):
TypeError: score must be an integer
>>> test.integer_validator('score', None)
Traceback (most recent call last):
TypeError: score must be an integer
>>> test.integer_validator('score', True)
Traceback (most recent call last):
TypeError: score must be an integer